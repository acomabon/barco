// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	io "io"

	interbroker "github.com/barcostreams/barco/internal/interbroker"

	mock "github.com/stretchr/testify/mock"

	types "github.com/barcostreams/barco/internal/types"

	url "net/url"

	uuid "github.com/google/uuid"
)

// Gossiper is an autogenerated mock type for the Gossiper type
type Gossiper struct {
	mock.Mock
}

// AcceptConnections provides a mock function with given fields:
func (_m *Gossiper) AcceptConnections() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGenerations provides a mock function with given fields: ordinal, token
func (_m *Gossiper) GetGenerations(ordinal int, token types.Token) interbroker.GenReadResult {
	ret := _m.Called(ordinal, token)

	var r0 interbroker.GenReadResult
	if rf, ok := ret.Get(0).(func(int, types.Token) interbroker.GenReadResult); ok {
		r0 = rf(ordinal, token)
	} else {
		r0 = ret.Get(0).(interbroker.GenReadResult)
	}

	return r0
}

// HasTokenHistoryForToken provides a mock function with given fields: ordinal, token
func (_m *Gossiper) HasTokenHistoryForToken(ordinal int, token types.Token) (bool, error) {
	ret := _m.Called(ordinal, token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, types.Token) bool); ok {
		r0 = rf(ordinal, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, types.Token) error); ok {
		r1 = rf(ordinal, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *Gossiper) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsHostUp provides a mock function with given fields: ordinal
func (_m *Gossiper) IsHostUp(ordinal int) bool {
	ret := _m.Called(ordinal)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(ordinal)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsTokenRangeCovered provides a mock function with given fields: ordinal, token
func (_m *Gossiper) IsTokenRangeCovered(ordinal int, token types.Token) (bool, error) {
	ret := _m.Called(ordinal, token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, types.Token) bool); ok {
		r0 = rf(ordinal, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, types.Token) error); ok {
		r1 = rf(ordinal, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenConnections provides a mock function with given fields:
func (_m *Gossiper) OpenConnections() {
	_m.Called()
}

// RangeSplitStart provides a mock function with given fields: ordinal
func (_m *Gossiper) RangeSplitStart(ordinal int) error {
	ret := _m.Called(ordinal)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(ordinal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadBrokerIsUp provides a mock function with given fields: ordinal, brokerUpOrdinal
func (_m *Gossiper) ReadBrokerIsUp(ordinal int, brokerUpOrdinal int) (bool, error) {
	ret := _m.Called(ordinal, brokerUpOrdinal)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(ordinal, brokerUpOrdinal)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(ordinal, brokerUpOrdinal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadProducerOffset provides a mock function with given fields: ordinal, topic
func (_m *Gossiper) ReadProducerOffset(ordinal int, topic *types.TopicDataId) (uint64, error) {
	ret := _m.Called(ordinal, topic)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(int, *types.TopicDataId) uint64); ok {
		r0 = rf(ordinal, topic)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *types.TopicDataId) error); ok {
		r1 = rf(ordinal, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadTokenHistory provides a mock function with given fields: ordinal, token
func (_m *Gossiper) ReadTokenHistory(ordinal int, token types.Token) (*types.Generation, error) {
	ret := _m.Called(ordinal, token)

	var r0 *types.Generation
	if rf, ok := ret.Get(0).(func(int, types.Token) *types.Generation); ok {
		r0 = rf(ordinal, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Generation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, types.Token) error); ok {
		r1 = rf(ordinal, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterConsumerInfoListener provides a mock function with given fields: listener
func (_m *Gossiper) RegisterConsumerInfoListener(listener interbroker.ConsumerInfoListener) {
	_m.Called(listener)
}

// RegisterGenListener provides a mock function with given fields: listener
func (_m *Gossiper) RegisterGenListener(listener interbroker.GenListener) {
	_m.Called(listener)
}

// RegisterHostUpDownListener provides a mock function with given fields: listener
func (_m *Gossiper) RegisterHostUpDownListener(listener interbroker.HostUpDownListener) {
	_m.Called(listener)
}

// RegisterReroutedMessageListener provides a mock function with given fields: listener
func (_m *Gossiper) RegisterReroutedMessageListener(listener interbroker.ReroutingListener) {
	_m.Called(listener)
}

// SendCommittedOffset provides a mock function with given fields: ordinal, offsetKv
func (_m *Gossiper) SendCommittedOffset(ordinal int, offsetKv *types.OffsetStoreKeyValue) error {
	ret := _m.Called(ordinal, offsetKv)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *types.OffsetStoreKeyValue) error); ok {
		r0 = rf(ordinal, offsetKv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendConsumerGroups provides a mock function with given fields: ordinal, groups
func (_m *Gossiper) SendConsumerGroups(ordinal int, groups []types.ConsumerGroup) error {
	ret := _m.Called(ordinal, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []types.ConsumerGroup) error); ok {
		r0 = rf(ordinal, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToFollowers provides a mock function with given fields: replicationInfo, topic, segmentId, chunk
func (_m *Gossiper) SendToFollowers(replicationInfo types.ReplicationInfo, topic types.TopicDataId, segmentId uint64, chunk types.SegmentChunk) error {
	ret := _m.Called(replicationInfo, topic, segmentId, chunk)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ReplicationInfo, types.TopicDataId, uint64, types.SegmentChunk) error); ok {
		r0 = rf(replicationInfo, topic, segmentId, chunk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToLeader provides a mock function with given fields: replicationInfo, topic, querystring, contentLength, body
func (_m *Gossiper) SendToLeader(replicationInfo types.ReplicationInfo, topic string, querystring url.Values, contentLength int64, body io.Reader) error {
	ret := _m.Called(replicationInfo, topic, querystring, contentLength, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ReplicationInfo, string, url.Values, int64, io.Reader) error); ok {
		r0 = rf(replicationInfo, topic, querystring, contentLength, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAsCommitted provides a mock function with given fields: ordinal, token1, token2, tx
func (_m *Gossiper) SetAsCommitted(ordinal int, token1 types.Token, token2 *types.Token, tx uuid.UUID) error {
	ret := _m.Called(ordinal, token1, token2, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, types.Token, *types.Token, uuid.UUID) error); ok {
		r0 = rf(ordinal, token1, token2, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGenerationAsProposed provides a mock function with given fields: ordinal, newGen, newGen2, expectedTx
func (_m *Gossiper) SetGenerationAsProposed(ordinal int, newGen *types.Generation, newGen2 *types.Generation, expectedTx *uuid.UUID) error {
	ret := _m.Called(ordinal, newGen, newGen2, expectedTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *types.Generation, *types.Generation, *uuid.UUID) error); ok {
		r0 = rf(ordinal, newGen, newGen2, expectedTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForPeersUp provides a mock function with given fields:
func (_m *Gossiper) WaitForPeersUp() {
	_m.Called()
}
